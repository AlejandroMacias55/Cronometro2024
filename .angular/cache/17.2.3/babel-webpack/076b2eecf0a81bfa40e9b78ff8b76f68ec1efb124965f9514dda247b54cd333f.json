{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { ConfInicial } from './classes/conf-inicial';\nimport { AlmacenamientoLocal } from './classes/local-storage';\nimport { Seleccionado } from './classes/seleccionado';\n//\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nlet AppComponent = class AppComponent {\n  constructor(logos, dialog, sanitizer) {\n    this.logos = logos;\n    this.dialog = dialog;\n    this.sanitizer = sanitizer;\n    this.candidatosArray = new Array();\n    this.candidatoSeleccionado = new Seleccionado();\n    this.logosArray = [];\n    this.confInicial = new ConfInicial();\n    this.tipoTiempo = 'Configuración Inicial';\n    this.msgAlert = '';\n    // bandera para las alertas\n    this.bandera_guardar = false;\n    // Cuando haya guardado los datos originales se estará listo para comenzar\n    this.banderaPreparados = false;\n    // Arrego con ID de los logos para verificar que no esté seleccionado aún\n    this.arrayLogos = [];\n    //para saber si es resumen o segmentos\n    this.banderaResumen = true;\n    // Bandera para saber si alguien está hablando\n    this.banderaTransmitir = false;\n    //Bandera para el ajuste de los tiempos de un candidato\n    this.banderaAjusteTiempo = false;\n    //Ajuste Array\n    this.ajusteArray = [];\n    //Contraseña de ajuste\n    this.passAjuste = '';\n    //Número Bloque:\n    this.numeroBloque = 1;\n    //\n    this.almacenamientoLocal = new AlmacenamientoLocal();\n    // Guardar estado al cambiar el bloque\n    this.estado = new Array();\n    //Meses del año:\n    this.months = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];\n    //Variables para confiramción\n    this.textoConfirmar = '';\n    this.banderaConfirmar = false;\n    //Bandera de cierre de debate\n    this.banderaCierre = false;\n    //Bandera para editar candidatos\n    this.banderaEditarCandidatos = false;\n  }\n  ngOnInit() {\n    if (this.almacenamientoLocal.getConfInicial() != undefined) {\n      this.confInicial = this.almacenamientoLocal.getConfInicial();\n    }\n    if (this.almacenamientoLocal.getArrayCandidatos() != undefined) {\n      this.candidatosArray = this.almacenamientoLocal.getArrayCandidatos();\n    }\n    if (this.almacenamientoLocal.getBanderaPreparadados() != undefined) {\n      this.banderaPreparados = Boolean(this.almacenamientoLocal.getBanderaPreparadados());\n    }\n    if (this.almacenamientoLocal.getBanderaCierre() != undefined) {\n      this.banderaCierre = Boolean(this.almacenamientoLocal.getBanderaCierre());\n    }\n    if (this.almacenamientoLocal.getNumeroBloque() != undefined) {\n      this.numeroBloque = Number(this.almacenamientoLocal.getNumeroBloque());\n    }\n    if (this.almacenamientoLocal.getTipoTiempo() != undefined) {\n      this.tipoTiempo = this.almacenamientoLocal.getTipoTiempo();\n    }\n    if (this.almacenamientoLocal.getArrayEstado() != undefined) {\n      this.estado = this.almacenamientoLocal.getArrayEstado();\n    }\n    this.iniciarSeleccionado();\n  }\n  iniciarSeleccionado() {\n    let auxTiempo;\n    auxTiempo = {\n      min: 0,\n      seg: 0,\n      terminado: false\n    };\n    this.candidatoSeleccionado = {\n      tiempo: auxTiempo,\n      id_logo: 0,\n      id_clase: 0,\n      nombre: '',\n      tipo_tiempo: this.tipoTiempo\n    };\n  }\n  formatTwoDigits(val) {\n    return val.toLocaleString('en-US', {\n      minimumIntegerDigits: 2,\n      useGrouping: false\n    });\n  }\n  guardarConfInicial(form) {\n    this.bandera_guardar = false;\n    this.bandera_guardar = !this.validar(form);\n    if (!this.bandera_guardar) {\n      this.tipoTiempo = 'Añadir Candidatos';\n      this.llenarCandidatos(false);\n    }\n  }\n  llenarCandidatos(bloqueNuevo) {\n    let array = [];\n    this.almacenamientoLocal.setConfInicial(this.confInicial);\n    for (let i = 0; i < this.confInicial.candidatos; i++) {\n      let candidato = {\n        nombre: this.banderaPreparados ? this.candidatosArray[i].nombre : '',\n        id_logo: this.banderaPreparados ? this.candidatosArray[i].id_logo : 0,\n        id_clase: this.banderaPreparados ? this.candidatosArray[i].id_clase : 0,\n        tiempo_exposicion: {\n          min: this.confInicial.tiempo_exposicion_min,\n          seg: this.confInicial.tiempo_exposicion_seg,\n          terminado: false\n        },\n        tiempo_segmento1: {\n          min: 0,\n          seg: 15,\n          terminado: false\n        },\n        tiempo_segmento2: {\n          min: 0,\n          seg: 45,\n          terminado: false\n        }\n      };\n      array.push(candidato);\n    }\n    if (bloqueNuevo) {\n      this.openDialogConfirm('¿Está seguro que desea pasar al siguiente bloque?', array);\n    } else this.candidatosArray = array;\n  }\n  nuevoBloque(array) {\n    var d = new Date();\n    this.estado.push({\n      bloque: this.numeroBloque,\n      fecha: `${this.formatTwoDigits(d.getDate())} de ${this.months[d.getMonth()]} del ${d.getFullYear()}`,\n      hora: `${this.formatTwoDigits(d.getHours())}:${this.formatTwoDigits(d.getMinutes())}`,\n      estado: this.candidatosArray\n    });\n    this.numeroBloque++;\n    this.almacenamientoLocal.setNumeroBloque(this.numeroBloque);\n    this.almacenamientoLocal.setArrayEstado(this.estado);\n    //\n    this.candidatosArray = array;\n    this.almacenamientoLocal.setArrayCandidatos(this.candidatosArray);\n    this.iniciarSeleccionado();\n    this.tipoTiempo = 'Listo Para Comenzar';\n    this.banderaPreparados = true;\n    this.banderaResumen = true;\n    this.detenerTiempo();\n  }\n  openDialog(partido, index_candidato) {\n    let pos;\n    pos = {\n      top: '34vh'\n    };\n    this.indexSeleccionado = index_candidato;\n    this.logosArray = partido ? this.logos.json.partidos : this.logos.json.coalisiones;\n    this.dialogRef = this.dialog.open(this.logosDialog, {\n      width: '30%',\n      height: '66vh',\n      disableClose: true,\n      position: pos\n    });\n    this.dialogRef.afterClosed().subscribe(result => {\n      //\n    });\n  }\n  openDialogTiempo() {\n    let pos;\n    pos = {\n      top: '34vh'\n    };\n    this.dialogRefTiempo = this.dialog.open(this.masTiempoDialog, {\n      width: '100%',\n      height: '66vh',\n      disableClose: true,\n      position: pos\n    });\n    this.dialogRefTiempo.afterClosed().subscribe(result => {\n      //\n    });\n  }\n  openDialogContrasena() {\n    let pos;\n    pos = {\n      top: '34vh'\n    };\n    this.dialogContrasena = this.dialog.open(this.contrasenaDialog, {\n      width: '30%',\n      disableClose: true,\n      position: pos\n    });\n    this.dialogContrasena.afterClosed().subscribe(result => {\n      this.passAjuste = '';\n    });\n  }\n  openDialogCierre() {\n    let pos;\n    pos = {\n      top: '34vh'\n    };\n    this.dialogCerrar = this.dialog.open(this.cierreDebateDialog, {\n      width: '30%',\n      disableClose: true,\n      position: pos\n    });\n  }\n  openDialogConfirm(mensaje, array) {\n    this.banderaConfirmar = false;\n    this.textoConfirmar = mensaje;\n    let pos;\n    pos = {\n      top: '34vh'\n    };\n    this.dialogConfirmar = this.dialog.open(this.confirmDialog, {\n      width: '30%',\n      disableClose: true,\n      position: pos\n    });\n    this.dialogConfirmar.afterClosed().subscribe(confirmado => {\n      if (this.banderaConfirmar) {\n        switch (this.textoConfirmar) {\n          case 'Está seguro de reiniciar la configuración':\n            this.reiniciar();\n            break;\n          case '¿Está seguro de guradar los cambios ralizados?':\n            this.ajustarTiempos();\n            break;\n          case 'Está seguro de finalizar el cronómetro. Todos los valores se reiniciarán':\n            this.finalizarCronometro();\n            break;\n          case '¿Está seguro que desea pasar al siguiente bloque?':\n            this.nuevoBloque(array);\n            break;\n        }\n      }\n    });\n  }\n  selectLogo(id, clase) {\n    if (this.verificarLogos(id)) {\n      this.arrayLogos.push(id);\n      this.candidatosArray[this.indexSeleccionado].id_logo = id;\n      this.candidatosArray[this.indexSeleccionado].id_clase = clase;\n      this.dialogRef.close();\n    } else this.openDialogConfirm('Este logo ya está siendo usado por otro candidato');\n  }\n  verificarLogos(id) {\n    let bandera = true;\n    if (this.arrayLogos.length != 0) {\n      for (const iterator of this.arrayLogos) {\n        if (iterator == id) bandera = false;\n      }\n    }\n    return bandera;\n  }\n  quitarLogo(index, id, bandera) {\n    if (id != 0) {\n      this.candidatosArray[index].id_logo = 0;\n      this.candidatosArray[index].id_clase = 0;\n      let indexLogos = 0;\n      let bandera_logos = false;\n      for (const iterator of this.arrayLogos) {\n        if (iterator == id) {\n          bandera_logos = true;\n          break;\n        }\n        indexLogos++;\n      }\n      if (bandera_logos) this.arrayLogos.splice(indexLogos, 1);\n    }\n  }\n  reiniciar() {\n    // if (confirm('Está seguro de reiniciar la configuración')) {\n    this.tipoTiempo = 'Configuración Inicial';\n    this.candidatosArray = new Array();\n    this.arrayLogos = [];\n    this.confInicial = new ConfInicial();\n    this.estado = new Array();\n    this.banderaPreparados = false;\n    this.banderaResumen = true;\n    this.banderaCierre = false;\n    this.numeroBloque = 1;\n    this.iniciarSeleccionado();\n    localStorage.clear();\n    // } else {\n    //   console.log('canceló');\n    // }\n  }\n  guardarCandidatos(valid, editar) {\n    if (valid) {\n      if (this.candidatosArray.length == this.arrayLogos.length) {\n        this.tipoTiempo = 'Listo Para Comenzar';\n        this.banderaPreparados = true;\n        this.almacenamientoLocal.setArrayCandidatos(this.candidatosArray);\n        this.almacenamientoLocal.setBanderaPreparadados(true);\n        this.almacenamientoLocal.setTipoTiempo(this.tipoTiempo);\n        this.banderaEditarCandidatos = false;\n      } else {\n        if (editar === true) {\n          this.almacenamientoLocal.setArrayCandidatos(this.candidatosArray);\n          this.banderaEditarCandidatos = false;\n        } else this.openDialogConfirm('Verifique que todos los candidatos tengan un logo');\n      }\n    } else {\n      this.openDialogConfirm('Debe de añadir el nombre del candidato a todos los campos');\n    }\n  }\n  iniciarTiempo(index, tipo_tiempo) {\n    this.banderaTransmitir = true;\n    this.tipoTiempo = tipo_tiempo;\n    this.claveTiempo = this.tipoTiempo == 'EXPONIENDO' ? 'tiempo_exposicion' :\n    // : this.tipoTiempo == 'SEGUIMIENTO MODERACIÓN'\n    // ? 'tiempo_seg_bolsa'\n    this.tipoTiempo == 'PREGUNTA' ? 'tiempo_segmento1' : 'tiempo_segmento2';\n    this.detenerTiempo();\n    this.indexCandidatoArray = index;\n    this.candidatoSeleccionado.id_clase = this.candidatosArray[index].id_clase;\n    this.candidatoSeleccionado.id_logo = this.candidatosArray[index].id_logo;\n    this.candidatoSeleccionado.nombre = this.candidatosArray[index].nombre;\n    if (this.banderaResumen) {\n      this.candidatoSeleccionado.tiempo.min = this.candidatosArray[index][this.claveTiempo].min;\n      this.candidatoSeleccionado.tiempo.seg = this.candidatosArray[index][this.claveTiempo].seg;\n      this.candidatoSeleccionado.tiempo.terminado = this.candidatosArray[index][this.claveTiempo].terminado;\n    } else {\n      this.calcularTiempoBolsa(index);\n    }\n    this.inicarTemporizador();\n  }\n  //\n  calcularTiempoBolsa(index) {\n    if (this.confInicial.tiempo_bolsa_min == this.candidatosArray[index][this.claveTiempo].min) {\n      if (this.candidatosArray[index][this.claveTiempo].seg > this.confInicial.tiempo_bolsa_seg) {\n        this.candidatoSeleccionado.tiempo.min = this.confInicial.tiempo_bolsa_min;\n        this.candidatoSeleccionado.tiempo.seg = this.confInicial.tiempo_bolsa_seg;\n      } else {\n        this.candidatoSeleccionado.tiempo.min = this.candidatosArray[index][this.claveTiempo].min;\n        this.candidatoSeleccionado.tiempo.seg = this.candidatosArray[index][this.claveTiempo].seg;\n        this.candidatoSeleccionado.tiempo.terminado = this.candidatosArray[index][this.claveTiempo].terminado;\n      }\n    } else if (this.candidatosArray[index][this.claveTiempo].min > this.confInicial.tiempo_bolsa_min) {\n      this.candidatoSeleccionado.tiempo.min = this.confInicial.tiempo_bolsa_min;\n      this.candidatoSeleccionado.tiempo.seg = this.confInicial.tiempo_bolsa_seg;\n    } else {\n      this.candidatoSeleccionado.tiempo.min = this.candidatosArray[index][this.claveTiempo].min;\n      this.candidatoSeleccionado.tiempo.seg = this.candidatosArray[index][this.claveTiempo].seg;\n      this.candidatoSeleccionado.tiempo.terminado = this.candidatosArray[index][this.claveTiempo].terminado;\n    }\n  }\n  //Debate\n  cierreDebate() {\n    let min_cierre = document.getElementById('inp_min_cierre');\n    let seg_cierre = document.getElementById('inp_seg_cierre');\n    let bandera = this.validarTiempoCierre(min_cierre, seg_cierre);\n    this.bandera_guardar = !bandera;\n    if (bandera) {\n      let array = [];\n      for (let i = 0; i < this.candidatosArray.length; i++) {\n        let candidato = {\n          nombre: this.banderaPreparados ? this.candidatosArray[i].nombre : '',\n          id_logo: this.banderaPreparados ? this.candidatosArray[i].id_logo : 0,\n          id_clase: this.banderaPreparados ? this.candidatosArray[i].id_clase : 0,\n          tiempo_exposicion: {\n            min: Number(this.formatTwoDigits(min_cierre.value)),\n            seg: Number(this.formatTwoDigits(seg_cierre.value)),\n            terminado: false\n          },\n          tiempo_segmento1: {\n            min: 0,\n            seg: 0,\n            terminado: false\n          },\n          tiempo_segmento2: {\n            min: 0,\n            seg: 0,\n            terminado: false\n          }\n        };\n        array.push(candidato);\n      }\n      var d = new Date();\n      this.estado.push({\n        bloque: this.numeroBloque,\n        fecha: `${this.formatTwoDigits(d.getDate())} de ${this.months[d.getMonth()]} del ${d.getFullYear()}`,\n        hora: `${this.formatTwoDigits(d.getHours())}:${this.formatTwoDigits(d.getMinutes())}`,\n        estado: this.candidatosArray\n      });\n      this.numeroBloque++;\n      this.almacenamientoLocal.setNumeroBloque(this.numeroBloque);\n      this.almacenamientoLocal.setArrayEstado(this.estado);\n      this.almacenamientoLocal.setBanderaCierre(true);\n      //\n      this.candidatosArray = array;\n      this.almacenamientoLocal.setArrayCandidatos(this.candidatosArray);\n      this.dialogCerrar.close();\n      this.banderaResumen = true;\n      this.banderaCierre = true;\n    }\n  }\n  ///Tiempo\n  inicarTemporizador() {\n    if (!this.banderaResumen) this.candidatoSeleccionado.tiempo.terminado = false;\n    this.detenerTiempo();\n    document.getElementById(this.claveTiempo + this.indexCandidatoArray).classList.add('blink_me');\n    let boton = document.getElementById(this.claveTiempo + '_button' + this.indexCandidatoArray);\n    // .classList.add('btn-danger');\n    boton.classList.add('btn-danger');\n    boton.classList.add('blink_me');\n    boton.innerHTML = 'Ocupado';\n    // this.guardarRegistros();\n    this.tempo = setInterval(() => this.temporizar(), 1000);\n  }\n  detenerTiempo() {\n    let conf = this.almacenamientoLocal.getConfInicial();\n    this.confInicial.tiempo_bolsa_min = conf.tiempo_bolsa_min;\n    this.confInicial.tiempo_bolsa_seg = conf.tiempo_bolsa_seg;\n    clearInterval(this.tempo);\n    if (this.indexCandidatoArray != undefined) {\n      let botones = ['tiempo_exposicion',\n      // 'tiempo_seg_bolsa',\n      'tiempo_segmento1', 'tiempo_segmento2'];\n      botones.forEach(element => {\n        try {\n          document.getElementById(element + this.indexCandidatoArray).classList.remove('blink_me');\n          let boton = document.getElementById(element + '_button' + this.indexCandidatoArray);\n          // .classList.add('btn-danger');\n          boton.classList.remove('btn-danger');\n          boton.classList.remove('blink_me');\n          boton.innerHTML = 'Iniciar';\n        } catch (error) {}\n      });\n    }\n  }\n  temporizar() {\n    if (this.banderaResumen) {\n      this.candidatosArray[this.indexCandidatoArray][this.claveTiempo].seg--;\n      if (--this.candidatoSeleccionado.tiempo.seg < 0) {\n        this.candidatoSeleccionado.tiempo.seg = 59;\n        this.candidatosArray[this.indexCandidatoArray][this.claveTiempo].seg = 59;\n        this.candidatosArray[this.indexCandidatoArray][this.claveTiempo].min--;\n        if (--this.candidatoSeleccionado.tiempo.min < 0) {\n          this.candidatoSeleccionado.tiempo.seg = 0;\n          this.candidatoSeleccionado.tiempo.min = 0;\n          this.candidatoSeleccionado.tiempo.terminado = true;\n          //\n          this.candidatosArray[this.indexCandidatoArray][this.claveTiempo].seg = 0;\n          this.candidatosArray[this.indexCandidatoArray][this.claveTiempo].min = 0;\n          this.candidatosArray[this.indexCandidatoArray][this.claveTiempo].terminado = true;\n          this.detenerTiempo();\n          this.dejarTransmitir();\n        }\n      }\n    } else {\n      if (this.descontarBolsa()) this.descontarSegmentoDiscusion();\n    }\n    this.almacenamientoLocal.setArrayCandidatos(this.candidatosArray);\n  }\n  descontarSegmentoDiscusion() {\n    if (--this.candidatosArray[this.indexCandidatoArray][this.claveTiempo].seg < 0) {\n      this.candidatosArray[this.indexCandidatoArray][this.claveTiempo].seg = 59;\n      if (--this.candidatosArray[this.indexCandidatoArray][this.claveTiempo].min < 0) {\n        this.candidatosArray[this.indexCandidatoArray][this.claveTiempo].seg = 0;\n        this.candidatosArray[this.indexCandidatoArray][this.claveTiempo].min = 0;\n        this.candidatosArray[this.indexCandidatoArray][this.claveTiempo].terminado = true;\n      }\n    }\n  }\n  descontarBolsa() {\n    if (--this.candidatoSeleccionado.tiempo.seg < 0) {\n      this.candidatoSeleccionado.tiempo.seg = 59;\n      if (--this.candidatoSeleccionado.tiempo.min < 0) {\n        this.candidatoSeleccionado.tiempo.seg = 0;\n        this.candidatoSeleccionado.tiempo.min = 0;\n        this.candidatoSeleccionado.tiempo.terminado = true;\n        //\n        if (this.candidatosArray[this.indexCandidatoArray][this.claveTiempo].seg == 0 && this.candidatosArray[this.indexCandidatoArray][this.claveTiempo].min == 0) {\n          this.candidatosArray[this.indexCandidatoArray][this.claveTiempo].terminado = true;\n        }\n        //\n        this.detenerTiempo();\n        this.dejarTransmitir();\n        return false;\n      }\n    }\n    return true;\n  }\n  dejarTransmitir() {\n    setTimeout(() => {\n      this.banderaTransmitir = false;\n    }, 2000);\n  }\n  ajustarTiempos() {\n    // if (confirm('¿Está seguro de guradar los cambios ralizados?')) {\n    this.banderaAjusteTiempo = true;\n    this.ajusteArray = [];\n    for (let index = 0; index < this.candidatosArray.length; index++) {\n      let valores = {};\n      //Exposición\n      let expMin = document.getElementById('min_exposicion' + index);\n      valores['expMin'] = expMin.value;\n      let expSeg = document.getElementById('seg_exposicion' + index);\n      valores['expSeg'] = expSeg.value;\n      // Segmento 1\n      let seg1Min = document.getElementById('min_seg1' + index);\n      valores['seg1Min'] = seg1Min.value;\n      let seg1Seg = document.getElementById('seg_seg1' + index);\n      valores['seg1Seg'] = seg1Seg.value;\n      // Segmento 2\n      let seg2Min = document.getElementById('min_seg2' + index);\n      valores['seg2Min'] = seg2Min.value;\n      let seg2Seg = document.getElementById('seg_seg2' + index);\n      valores['seg2Seg'] = seg2Seg.value;\n      this.ajusteArray.push(valores);\n    }\n    this.banderaAjusteTiempo = !this.validarAjusteTiempo();\n    if (!this.banderaAjusteTiempo) {\n      this.reajustarTiempos();\n      this.banderaAjusteTiempo = false;\n      this.dialogRefTiempo.close();\n    }\n    // }\n  }\n  reajustarTiempos() {\n    for (let index = 0; index < this.ajusteArray.length; index++) {\n      // Exposición\n      if (this.ajusteArray[index].expMin != '') {\n        this.candidatosArray[index].tiempo_exposicion.min = Number(this.formatTwoDigits(this.ajusteArray[index].expMin));\n      }\n      if (this.ajusteArray[index].expSeg != '') {\n        this.candidatosArray[index].tiempo_exposicion.seg = Number(this.formatTwoDigits(this.ajusteArray[index].expSeg));\n      }\n      // Segmento 1\n      if (this.ajusteArray[index].seg1Min != '') {\n        this.candidatosArray[index].tiempo_segmento1.min = Number(this.formatTwoDigits(this.ajusteArray[index].seg1Min));\n      }\n      if (this.ajusteArray[index].seg1Seg != '') {\n        this.candidatosArray[index].tiempo_segmento1.seg = Number(this.formatTwoDigits(this.ajusteArray[index].seg1Seg));\n      }\n      // Segemnto 2\n      if (this.ajusteArray[index].seg2Min != '') {\n        this.candidatosArray[index].tiempo_segmento2.min = Number(this.formatTwoDigits(this.ajusteArray[index].seg2Min));\n      }\n      if (this.ajusteArray[index].seg2Seg != '') {\n        this.candidatosArray[index].tiempo_segmento2.seg = Number(this.formatTwoDigits(this.ajusteArray[index].seg2Seg));\n      }\n    }\n    this.almacenamientoLocal.setArrayCandidatos(this.candidatosArray);\n  }\n  finalizarCronometro() {\n    var d = new Date();\n    this.estado.push({\n      bloque: this.numeroBloque,\n      fecha: `${this.formatTwoDigits(d.getDate())} de ${this.months[d.getMonth()]} del ${d.getFullYear()}`,\n      hora: `${this.formatTwoDigits(d.getHours())}:${this.formatTwoDigits(d.getMinutes())}`,\n      estado: this.candidatosArray\n    });\n    setTimeout(() => {\n      const doc = new jsPDF('landscape');\n      autoTable(doc, {\n        html: '#my-table'\n      });\n      doc.save('reporte.pdf');\n      this.tipoTiempo = 'Configuración Inicial';\n      this.candidatosArray = new Array();\n      this.arrayLogos = [];\n      this.confInicial = new ConfInicial();\n      this.banderaPreparados = false;\n      this.banderaResumen = true;\n      this.numeroBloque = 1;\n      this.estado = new Array();\n      this.iniciarSeleccionado();\n      this.reiniciar();\n      localStorage.clear();\n    }, 2000);\n    // }\n  }\n  validarContrasena() {\n    if (this.passAjuste == '321') {\n      this.openDialogTiempo();\n      this.dialogContrasena.close();\n      this.passAjuste = '';\n    } else {\n      this.openDialogConfirm('La contraseña es incorrecta');\n    }\n  }\n  validar(form) {\n    let controls = form.controls;\n    if (controls.candidatos.value == undefined) {\n      this.msgAlert = 'El campo candidatos no debe de ir vacío';\n      return false;\n    } else if (!(controls.candidatos.value > 1 && controls.candidatos.value < 17)) {\n      this.msgAlert = 'El número de candidatos debe de entrar en el rango 2 - 16';\n      return false;\n    }\n    //Tiempo Exposición\n    else if (controls.min_exposicion.value == undefined) {\n      this.msgAlert = 'El campo minutos del tiempo de exposición no debe de ir vacío';\n      return false;\n    } else if (!(controls.min_exposicion.value > -1 && controls.min_exposicion.value < 60)) {\n      this.msgAlert = 'Los minutos del tiempo exposición deben entrar en el rango 0 - 59';\n      return false;\n    } else if (controls.seg_exposicion.value == undefined) {\n      this.msgAlert = 'El campo segundos del tiempo de exposición no debe de ir vacío';\n      return false;\n    } else if (!(controls.seg_exposicion.value > -1 && controls.seg_exposicion.value < 60)) {\n      this.msgAlert = 'Los segundos del tiempo exposición deben entrar en el rango 0 - 59';\n      return false;\n    } else if (controls.min_exposicion.value == 0 && controls.seg_exposicion.value == 0) {\n      this.msgAlert = 'El tiempo exposición debe tener al menos 1 segundo';\n      return false;\n    }\n    //Tiempo Bolsa\n    else if (controls.min_bolsa.value == undefined) {\n      this.msgAlert = 'El campo minutos del tiempo de bolsa no debe de ir vacío';\n      return false;\n    } else if (!(controls.min_bolsa.value > -1 && controls.min_bolsa.value < 60)) {\n      this.msgAlert = 'Los minutos del tiempo de bolsa deben entrar en el rango 0 - 59';\n      return false;\n    } else if (controls.seg_bolsa.value == undefined) {\n      this.msgAlert = 'El campo segundos del tiempo de bolsa no debe de ir vacío';\n      return false;\n    } else if (!(controls.seg_bolsa.value > -1 && controls.seg_bolsa.value < 60)) {\n      this.msgAlert = 'Los segundos del tiempo de bolsa deben entrar en el rango 0 - 59';\n      return false;\n    } else if (controls.min_bolsa.value == 0 && controls.seg_bolsa.value == 0) {\n      this.msgAlert = 'El tiempo de bolsa debe tener al menos 1 segundo';\n      return false;\n    }\n    //Tiempo Segmentos\n    else if (controls.min_segmentos.value == undefined) {\n      this.msgAlert = 'El campo minutos del tiempo de segmentos no debe de ir vacío';\n      return false;\n    } else if (!(controls.min_segmentos.value > -1 && controls.min_segmentos.value < 60)) {\n      this.msgAlert = 'Los minutos del tiempo segmentos deben entrar en el rango 0 - 59';\n      return false;\n    } else if (controls.seg_segmentos.value == undefined) {\n      this.msgAlert = 'El campo segundos del tiempo de segmentos no debe de ir vacío';\n      return false;\n    } else if (!(controls.seg_segmentos.value > -1 && controls.seg_segmentos.value < 60)) {\n      this.msgAlert = 'Los segundos del tiempo segmentos deben entrar en el rango 0 - 59';\n      return false;\n    } else if (controls.min_segmentos.value == 0 && controls.seg_segmentos.value == 0) {\n      this.msgAlert = 'El tiempo segmentos debe tener al menos 1 segundo';\n      return false;\n    }\n    return true;\n  }\n  validarAjusteTiempo() {\n    let index = 0;\n    for (const iterator of this.ajusteArray) {\n      ///////// Exposición ///////\n      // Minuto\n      if (iterator.expMin != '') {\n        if (!(iterator.expMin > -1 && iterator.expMin < 60)) {\n          this.msgAlert = 'Por favor verifique el campo de minutos exposición del candidato: ' + this.candidatosArray[index].nombre;\n          return false;\n        }\n      }\n      // Segundo\n      if (iterator.expSeg != '') {\n        if (!(iterator.expSeg > -1 && iterator.expSeg < 60)) {\n          this.msgAlert = 'Por favor verifique el campo de segundos exposición del candidato: ' + this.candidatosArray[index].nombre;\n          return false;\n        }\n      }\n      if (iterator.expMin != '' && iterator.expSeg != '') if (iterator.expMin == 0 && iterator.expSeg == 0) {\n        this.msgAlert = 'El tiempo de Exposición debe de tener al menos 1 seg del candidato: ' + this.candidatosArray[index].nombre;\n        return false;\n      }\n      ///////// Segmento 1  ///////\n      // Minuto\n      if (iterator.seg1Min != '') {\n        if (!(iterator.seg1Min > -1 && iterator.seg1Min < 60)) {\n          this.msgAlert = 'Por favor verifique el campo de minutos Segmento 1  del candidato: ' + this.candidatosArray[index].nombre;\n          return false;\n        }\n      }\n      // Segundo\n      if (iterator.seg1Seg != '') {\n        if (!(iterator.seg1Seg > -1 && iterator.seg1Seg < 60)) {\n          this.msgAlert = 'Por favor verifique el campo de segundos Segmento 1 del candidato: ' + this.candidatosArray[index].nombre;\n          return false;\n        }\n      }\n      if (iterator.seg1Min != '' && iterator.seg1Seg != '') if (iterator.seg1Min == 0 && iterator.seg1Seg == 0) {\n        this.msgAlert = 'El tiempo de Segmento 1 debe de tener al menos 1 seg del candidato ' + this.candidatosArray[index].nombre;\n        return false;\n      }\n      ///////// Segmento 2  ///////\n      // Minuto\n      if (iterator.seg2Min != '') {\n        if (!(iterator.seg2Min > -1 && iterator.seg2Min < 60)) {\n          this.msgAlert = 'Por favor verifique el campo de minutos Segmento 2 del candidato: ' + this.candidatosArray[index].nombre;\n          return false;\n        }\n      }\n      // Segundo\n      if (iterator.seg2Seg != '') {\n        if (!(iterator.seg2Seg > -1 && iterator.seg2Seg < 60)) {\n          this.msgAlert = 'Por favor verifique el campo de segundos Segmento 2 del candidato: ' + this.candidatosArray[index].nombre;\n          return false;\n        }\n      }\n      if (iterator.seg2Min != '' && iterator.seg2Seg != '') if (iterator.seg2Min == 0 && iterator.seg2Seg == 0) {\n        this.msgAlert = 'El tiempo de Segmento 2 debe de tener al menos 1 seg del candidato: ' + this.candidatosArray[index].nombre;\n        return false;\n      }\n      index++;\n    }\n    return true;\n  }\n  validarTiempoCierre(min_cierre, seg_cierre) {\n    // let min_cierre: any = document.getElementById(\"inp_min_cierre\");\n    // let seg_cierre: any = document.getElementById(\"inp_seg_cierre\");\n    if (min_cierre.value == '') {\n      this.msgAlert = 'El campo minutos del tiempo de cierre no debe de ir vacío';\n      return false;\n    } else if (!(min_cierre.value > -1 && min_cierre.value < 60)) {\n      this.msgAlert = 'Los minutos del tiempo cierre deben entrar en el rango 0 - 59';\n      return false;\n    } else if (seg_cierre.value == '') {\n      this.msgAlert = 'El campo segundos del tiempo de cierre no debe de ir vacío';\n      return false;\n    } else if (!(seg_cierre.value > -1 && seg_cierre.value < 60)) {\n      this.msgAlert = 'Los segundos del tiempo cierre deben entrar en el rango 0 - 59';\n      return false;\n    } else if (min_cierre.value == 0 && seg_cierre.value == 0) {\n      this.msgAlert = 'El tiempo cierre debe tener al menos 1 segundo';\n      return false;\n    }\n    return true;\n  }\n};\n__decorate([ViewChild('logosDialog', {\n  static: false\n})], AppComponent.prototype, \"logosDialog\", void 0);\n__decorate([ViewChild('masTiempoDialog', {\n  static: false\n})], AppComponent.prototype, \"masTiempoDialog\", void 0);\n__decorate([ViewChild('contrasenaDialog', {\n  static: false\n})], AppComponent.prototype, \"contrasenaDialog\", void 0);\n__decorate([ViewChild('confirmDialog', {\n  static: false\n})], AppComponent.prototype, \"confirmDialog\", void 0);\n__decorate([ViewChild('cierreDebateDialog', {\n  static: false\n})], AppComponent.prototype, \"cierreDebateDialog\", void 0);\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})], AppComponent);\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}